# -*- coding: utf-8 -*-
"""IMDB_Cleaning.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1btDkkp-wfJgbvdSP3GmYXsrFG5_1F2Fc

# Import Kaggle library and dataset
"""

import kagglehub

# Download latest version
path = kagglehub.dataset_download("davidfuenteherraiz/messy-imdb-dataset")

print("Path to dataset files:", path)

"""# Import necessary libraries"""

import numpy as np
import pandas as pd

from google.colab import files
uploaded = files.upload()

print(uploaded.keys())

!unzip archive.zip

df = pd.read_csv('messy_IMDB_dataset.csv', encoding='Windows-1252', sep=';')
df_backup =  pd.read_csv('messy_IMDB_dataset.csv', encoding='Windows-1252', sep=';')

"""# Create a backup to keep a copy of original csv"""

df_backup

"""# Start looking for duplicates and null vales/columns"""

df.duplicated().sum()

df.isnull().sum()

"""#Drop null columns and values"""

df = df.drop(columns=['Unnamed: 8'])

df = df.dropna()

df.isnull().sum()

df.head()

"""# Fix column names"""

df = df.rename(columns={
    'Original titlÊ' : 'Original_Title',
    'Genrë¨' : 'Genre',
    'IMBD title ID' : 'IMBD_Title_ID',
    'Release year' : 'Release_Year',
    'Content Rating' : 'Content_Rating',
    ' Votes ' : 'Votes'
})

df.head()

"""# Explor data types"""

df.dtypes

df['Release_Year'].value_counts()

df['Release_Year']

"""# change the release year to datetime"""

df['Release_Year'] = pd.to_datetime(df['Release_Year'], errors='coerce')

df.head()

"""# Update duration column to numeric"""

# Step 1: Convert the 'Duration' column to numeric, invalid values will become NaN
df['Duration'] = pd.to_numeric(df['Duration'], errors='coerce')

# Step 2: Replace NaN values with 0
df['Duration'] = df['Duration'].fillna(0)

df.head()

"""# Update the income column"""

# Step 1: Remove the dollar sign and commas
df['Income'] = df['Income'].replace({'\$': '', ',': ''}, regex=True)

# Step 2: Convert the column to numeric type (float or int)
df['Income'] = pd.to_numeric(df['Income'], errors='coerce')

# Step 3: Replace NaN values with 0
df['Income'] = df['Income'].fillna(0)

# currency-like format
df['Income'] = df['Income'].apply(lambda x: f'${x:,.2f}')

df.head()

"""#Update votes column"""

df['Votes']

df['Votes'] = df['Votes'].str.replace('.', '', regex=False).astype(int)

df.head()

"""# Update Score column"""

df['Score']

"""#Attempt 1"""

df['Score'] = df['Score'].str.replace('[^0-9.]', '', regex=True).astype(float)

"""# Attempt 2"""

import re

# Clean the strings
def clean_score(val):
    # Remove all non-digit and non-dot characters
    val = re.sub(r'[^0-9.]', '', val)
    # Replace multiple dots with one
    val = re.sub(r'\.{2,}', '.', val)
    # Ensure format is valid float: if ends with dot, add 0
    if val.endswith('.'):
        val += '0'
    elif val.startswith('.'):
        val = '0' + val
    return float(val)

# Apply cleaning function
df['Score'] = df['Score'].apply(clean_score)

"""#Attempt 3!"""

# Clean the strings
def clean_score(val):
    # Remove all non-digit and non-dot characters
    val = re.sub(r'[^0-9.]', '', val)
    # If there are multiple dots, keep only the first one
    if val.count('.') > 1:
        first_dot_index = val.find('.')
        # Remove all other dots
        val = val[:first_dot_index + 1] + val[first_dot_index + 1:].replace('.', '')
    # Fix common edge cases
    if val.endswith('.'):
        val += '0'
    if val.startswith('.'):
        val = '0' + val
    return float(val)

# Apply cleaning function
df['Score'] = df['Score'].apply(clean_score)

"""#Double check data"""

df.head()

df['Score'] = df['Score'].apply(lambda x: x / 10 if x >= 10 else x)

df.head()

df.dtypes

df.dtypes

df.isnull().sum()

df.duplicated().sum()

"""#Data is ready for analysis!!!




"""